name: CI Pipeline - Bot Trading MVP

env:
  PYTHON_VERSION: '3.12'
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Job 1: An√°lise de C√≥digo e Linting
  code-quality:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
env:
  PYTHON_VERSION: '3.12'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
env:
  PYTHON_VERSION: '3.12'
      
    - name: Setup Python
      uses: actions/setup-python@v5
env:
  PYTHON_VERSION: '3.12'
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache depend√™ncias Python
      uses: actions/cache@v4
env:
  PYTHON_VERSION: '3.12'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Instalar depend√™ncias de desenvolvimento
      run: |
env:
  PYTHON_VERSION: '3.12'
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: Executar Black (formata√ß√£o)
      run: black --check --diff .
env:
  PYTHON_VERSION: '3.12'
      
    - name: Executar isort (imports)
      run: isort --check-only --diff .
env:
  PYTHON_VERSION: '3.12'
      
    - name: Executar Flake8 (linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
env:
  PYTHON_VERSION: '3.12'
      
    - name: Executar MyPy (type checking)
      run: mypy . --ignore-missing-imports || true
env:
  PYTHON_VERSION: '3.12'
      
    - name: Executar Bandit (seguran√ßa)
      run: bandit -r . -f json -o bandit-report.json || true
env:
  PYTHON_VERSION: '3.12'
      
    - name: Verificar vulnerabilidades em depend√™ncias
      run: safety check --json --output safety-report.json || true
env:
  PYTHON_VERSION: '3.12'
      
    - name: Upload relat√≥rios de seguran√ßa
      uses: actions/upload-artifact@v4
env:
  PYTHON_VERSION: '3.12'
      with:
        name: security-reports
        path: |
env:
  PYTHON_VERSION: '3.12'
          bandit-report.json
          safety-report.json

  # Job 2: Testes Unit√°rios e de Integra√ß√£o
  tests:
    name: üß™ Tests & Coverage
    runs-on: ubuntu-latest
env:
  PYTHON_VERSION: '3.12'
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
env:
  PYTHON_VERSION: '3.12'
      
    - name: Setup Python
      uses: actions/setup-python@v5
env:
  PYTHON_VERSION: '3.12'
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache depend√™ncias Python
      uses: actions/cache@v4
env:
  PYTHON_VERSION: '3.12'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Instalar depend√™ncias
      run: |
env:
  PYTHON_VERSION: '3.12'
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
        
    - name: Executar testes unit√°rios
      env:
env:
  PYTHON_VERSION: '3.12'
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/trading_bot_test
        REDIS_URL: redis://localhost:6379
        BYBIT_API_KEY: ${{ secrets.BYBIT_API_KEY_TEST }}
        BYBIT_API_SECRET: ${{ secrets.BYBIT_API_SECRET_TEST }}
        JWT_SECRET: test-secret-key
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-fail-under=70
        
    - name: Upload relat√≥rio de cobertura
      uses: codecov/codecov-action@v3
env:
  PYTHON_VERSION: '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
env:
  PYTHON_VERSION: '3.12'
    - name: Upload artefatos de teste
      uses: actions/upload-artifact@v4
env:
  PYTHON_VERSION: '3.12'
      with:
        name: test-results
        path: |
env:
  PYTHON_VERSION: '3.12'
          htmlcov/
          coverage.xml

  # Job 3: Build Docker
  docker-build:
    name: üê≥ Docker Build & Security Scan
    runs-on: ubuntu-latest
env:
  PYTHON_VERSION: '3.12'
    needs: [code-quality, tests]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
env:
  PYTHON_VERSION: '3.12'
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
env:
  PYTHON_VERSION: '3.12'
      
    - name: Login no Docker Hub
      if: github.event_name != 'pull_request'
env:
  PYTHON_VERSION: '3.12'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
env:
  PYTHON_VERSION: '3.12'
        
    - name: Extrair metadados
      id: meta
env:
  PYTHON_VERSION: '3.12'
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/trading-bot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build e push da imagem Docker
      uses: docker/build-push-action@v5
env:
  PYTHON_VERSION: '3.12'
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Executar Trivy (scan de seguran√ßa)
      uses: aquasecurity/trivy-action@master
env:
  PYTHON_VERSION: '3.12'
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/trading-bot:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload resultados do Trivy
      uses: github/codeql-action/upload-sarif@v2
env:
  PYTHON_VERSION: '3.12'
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Testes de Integra√ß√£o
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
env:
  PYTHON_VERSION: '3.12'
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
env:
  PYTHON_VERSION: '3.12'
      
    - name: Setup Docker Compose
      run: |
env:
  PYTHON_VERSION: '3.12'
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Executar stack completa
      env:
env:
  PYTHON_VERSION: '3.12'
        BYBIT_API_KEY: ${{ secrets.BYBIT_API_KEY_TEST }}
        BYBIT_API_SECRET: ${{ secrets.BYBIT_API_SECRET_TEST }}
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Aguardar servi√ßos iniciarem
        
    - name: Executar testes de integra√ß√£o
      run: |
env:
  PYTHON_VERSION: '3.12'
        docker-compose -f docker-compose.test.yml exec -T api pytest tests/integration/ -v
        
    - name: Executar testes de API
      run: |
env:
  PYTHON_VERSION: '3.12'
        docker-compose -f docker-compose.test.yml exec -T api pytest tests/api/ -v
        
    - name: Coletar logs
      if: failure()
env:
  PYTHON_VERSION: '3.12'
      run: |
        docker-compose -f docker-compose.test.yml logs > integration-logs.txt
        
    - name: Upload logs de falha
      if: failure()
env:
  PYTHON_VERSION: '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: integration-logs
        path: integration-logs.txt
env:
  PYTHON_VERSION: '3.12'
        
    - name: Cleanup
      if: always()
env:
  PYTHON_VERSION: '3.12'
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Job 5: An√°lise de Performance
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
env:
  PYTHON_VERSION: '3.12'
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
env:
  PYTHON_VERSION: '3.12'
      
    - name: Setup Python
      uses: actions/setup-python@v5
env:
  PYTHON_VERSION: '3.12'
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Instalar depend√™ncias de performance
      run: |
env:
  PYTHON_VERSION: '3.12'
        pip install locust pytest-benchmark
        
    - name: Executar testes de carga
      run: |
env:
  PYTHON_VERSION: '3.12'
        # Executar testes b√°sicos de performance
        python -m pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json
        
    - name: Upload resultados de performance
      uses: actions/upload-artifact@v4
env:
  PYTHON_VERSION: '3.12'
      with:
        name: performance-results
        path: benchmark.json
env:
  PYTHON_VERSION: '3.12'

  # Job 6: Notifica√ß√µes
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
env:
  PYTHON_VERSION: '3.12'
    needs: [code-quality, tests, docker-build, integration-tests]
    if: always()
    
    steps:
    - name: Notificar sucesso
      if: ${{ needs.code-quality.result == 'success' && needs.tests.result == 'success' && needs.docker-build.result == 'success' }}
env:
  PYTHON_VERSION: '3.12'
      run: |
        echo "‚úÖ Pipeline executado com sucesso!"
        # Aqui voc√™ pode adicionar notifica√ß√£o para Slack/Discord
        
    - name: Notificar falha
      if: ${{ needs.code-quality.result == 'failure' || needs.tests.result == 'failure' || needs.docker-build.result == 'failure' }}
env:
  PYTHON_VERSION: '3.12'
      run: |
        echo "‚ùå Pipeline falhou!"
        # Aqui voc√™ pode adicionar notifica√ß√£o para Slack/Discord
