name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

jobs:
  lint:
    name: Lint & Static Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run pre-commit (if configured)
        run: |
          if [ -f ".pre-commit-config.yaml" ] || [ -f ".pre-commit-config.yml" ]; then
            pre-commit run --all-files --show-diff-on-failure
          else
            echo "No pre-commit config found, skipping."
          fi

      - name: Extra linters (fallback)
        run: |
          python -c "import sys; import importlib.util as u; print('mypy:',bool(u.find_spec('mypy')),'flake8:',bool(u.find_spec('flake8')),'black:',bool(u.find_spec('black')),'pylint:',bool(u.find_spec('pylint')))"
          if python - <<'PY'
import importlib.util as u
import sys, os
def has(m): return bool(u.find_spec(m))
ok=True
if has("black"): os.system("black --check .") or True
if has("flake8"): os.system("flake8 .") or True
if has("mypy") and os.path.exists("pyproject.toml") or os.path.exists("mypy.ini"):
    os.system("mypy .") or True
if has("pylint") and os.path.exists("pyproject.toml"):
    # ajuste o pacote/dir alvo se necessÃ¡rio
    os.system("pylint $(ls -d */ | head -n1)") or True
PY
          then
            echo "Lint fallback completed."
          fi

  tests:
    name: Tests (pytest)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
      REDIS_URL: redis://localhost:6379/0
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install deps (tests only)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Install Playwright browsers (if used)
        if: ${{ contains(steps.deps_out.outputs.uses_playwright || 'true', 'true') == false }}
        run: |
          if python -c "import importlib.util as u; print(bool(u.find_spec('pytest_playwright')))" | grep -q "True"; then
            python -m playwright install --with-deps
          else
            echo "pytest-playwright not present, skipping browser install."
          fi

      - name: Run pytest
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov --cov-report=xml

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
