name: Security Checks - Bot Trading MVP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Versions (debug)
        run: |
          python -V
          pip -V

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Safety
        run: |
          safety check --json --output safety-report.json || true

      - name: Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Semgrep (action)
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: true
          sarifFile: semgrep-report.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.sarif

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t trading-bot:security-scan .

      - name: Trivy (image)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: trading-bot:security-scan
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true

      - name: Trivy (config)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: config
          format: sarif
          output: trivy-config-results.sarif

      - name: Upload SARIF (image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Upload SARIF (config)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config-results.sarif

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ "python", "javascript" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeQL init
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Analyze
        uses: github/codeql-action/analyze@v3

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pip-licenses
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Generate license report
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip-licenses --format=json --output-file=licenses-report.json
            pip-licenses --format=plain-vertical
          else
            echo "requirements.txt not found; skipping."
            printf "[]\n" > licenses-report.json
          fi

      - name: Validate forbidden licenses
        run: |
          python -c "import json,sys,os; p='licenses-report.json';\
from json import load;\
forbidden={'GPL-3.0','AGPL-3.0','LGPL-3.0'};\
import codecs;\
d=[];\
print('Checking licenses...');\
d=load(codecs.open(p,'r','utf-8')) if os.path.exists(p) else [];\
issues=[f\"{i.get('Name')} ({i.get('License')})\" for i in d if i.get('License') in forbidden];\
( print('Forbidden licenses:', ', '.join(issues)) or sys.exit(1) ) if issues else print('All licenses OK')"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses-report.json

  config-security:
    name: Configuration Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check sensitive files and Docker
        run: |
          echo "Checking for sensitive files..."
          for f in .env .env.local .env.production config.ini secrets.json; do
            if [ -f "$f" ]; then
              echo "Found: $f"
              head -5 "$f" || true
            fi
          done
          if [ -f Dockerfile ]; then
            grep -q "USER root" Dockerfile && echo "Dockerfile runs as root" || true
            grep -q "ADD http" Dockerfile && echo "Dockerfile uses ADD with http" || true
            grep -Eq "RUN.*sudo" Dockerfile && echo "Dockerfile uses sudo" || true
          fi
          if [ -f docker-compose.yml ]; then
            grep -q "privileged: true" docker-compose.yml && echo "privileged: true detected" || true
            grep -Eq "network_mode.*host" docker-compose.yml && echo "network_mode: host detected" || true
          fi

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [ dependency-check, secret-scan, container-security, license-check, config-security ]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary
        shell: bash
        run: |
          {
            echo "# Security Report - $(date)"
            echo
            echo "## Job Status"
            echo "- Dependency Check: ${{ needs.dependency-check.result }}"
            echo "- Secret Scan: ${{ needs.secret-scan.result }}"
            echo "- Container Security: ${{ needs.container-security.result }}"
            echo "- License Check: ${{ needs.license-check.result }}"
            echo "- Config Security: ${{ needs.config-security.result }}"
            echo
            echo "## Findings (Safety)"
            if [ -f "security-reports/safety-report.json" ]; then
              COUNT=$(python -c "import json,sys; import os; print(len(json.load(open('security-reports/safety-report.json'))) if os.path.exists('security-reports/safety-report.json') else 0)" 2>/dev/null || echo 0)
              echo "- ${COUNT} found"
            else
              echo "- No safety report found"
            fi
            echo
            echo "## Recommendations"
            echo "1. Fix high-severity vulnerabilities"
            echo "2. Update affected dependencies"
            echo "3. Rotate secrets regularly"
            echo "4. Enable automated alerts"
          } > security-summary.md
          cat security-summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md','utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
