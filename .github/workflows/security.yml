name: Security Checks - Bot Trading MVP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

# Permiss√µes m√≠nimas para subir SARIF e ler conte√∫do
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # 1) Depend√™ncias (Safety + Bandit + Semgrep)
  dependency-check:
    name: "üîí Dependency Security Scan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Vers√µes (debug)
        run: |
          python -V
          pip -V

      - name: Instalar ferramentas de seguran√ßa
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Safety (requirements)
        run: safety check --json --output safety-report.json || true

      - name: Bandit (SAST)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Semgrep (action oficial)
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: true
          sarifFile: semgrep-report.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload relat√≥rios
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.sarif

  # 2) Secrets (GitLeaks)
  secret-scan:
    name: "üîê Secret Detection"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (hist√≥rico completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # 3) Container (Trivy + upload SARIF)
  container-security:
    name: "üê≥ Container Security Scan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build imagem
        run: docker build -t trading-bot:security-scan .

      - name: Trivy (image vulns)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: trading-bot:security-scan
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true

      - name: Trivy (config scan)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: config
          format: sarif
          output: trivy-config-results.sarif

      - name: Upload SARIF (image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Upload SARIF (config)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config-results.sarif

  # 4) CodeQL (v3)
  codeql-analysis:
    name: "üîç CodeQL Analysis"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ "python", "javascript" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeQL init
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Analyze
        uses: github/codeql-action/analyze@v3

  # 5) Licen√ßas (sem heredoc)
  license-check:
    name: "üìÑ License Compliance"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Instalar pip-licenses
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Gerar relat√≥rio de licen√ßas
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip-licenses --format=json --output-file=licenses-report.json
            pip-licenses --format=plain-vertical
          else
            echo "requirements.txt n√£o encontrado; pulando."
            printf "[]\n" > licenses-report.json
          fi

      - name: Validar licen√ßas proibidas
        run: |
          echo "import json,sys,os
forbidden={'GPL-3.0','AGPL-3.0','LGPL-3.0'}
p='licenses-report.json'
if not os.path.exists(p):
    print('licenses-report.json ausente; ok'); sys.exit(0)
with open(p,'r',encoding='utf-8') as f:
    try:
        data=json.load(f)
    except Exception as e:
        print('erro lendo licenses-report.json:',e); sys.exit(0)
issues=[f\"{i.get('Name')} ({i.get('License')})\" for i in data if i.get('License') in forbidden]
if issues:
    print('‚ùå Licen√ßas problem√°ticas:'); [print(' -',x) for x in issues]; sys.exit(1)
print('‚úÖ Todas as licen√ßas compat√≠veis')" > check_licenses.py
          python check_licenses.py

      - name: Upload relat√≥rio
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses-report.json

  # 6) Verifica√ß√µes de configura√ß√£o
  config-security:
    name: "‚öôÔ∏è Configuration Security"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checar arquivos e Docker
        run: |
          echo "üîç Verificando arquivos sens√≠veis..."
          for f in .env .env.local .env.production config.ini secrets.json; do
            if [ -f "$f" ]; then
              echo "‚ö†Ô∏è  Encontrado: $f"; head -5 "$f" || true
            fi
          done
          if [ -f Dockerfile ]; then
            grep -q "USER root" Dockerfile && echo "‚ö†Ô∏è  Dockerfile executa como root" || true
            grep -q "ADD http" Dockerfile && echo "‚ö†Ô∏è  Dockerfile usa ADD com HTTP" || true
            grep -Eq "RUN.*sudo" Dockerfile && echo "‚ö†Ô∏è  Dockerfile usa sudo" || true
          fi
          if [ -f docker-compose.yml ]; then
            grep -q "privileged: true" docker-compose.yml && echo "‚ö†Ô∏è  privileged: true" || true
            grep -Eq "network_mode.*host" docker-compose.yml && echo "‚ö†Ô∏è  network_mode: host" || true
          fi

  # 7) Relat√≥rio consolidado (sem heredoc)
  security-report:
    name: "üìä Security Report"
    runs-on: ubuntu-latest
    needs: [ dependency-check, secret-scan, container-security, license-check, config-security ]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Gerar resumo
        shell: bash
        run: |
          {
            echo "# üîí Relat√≥rio de Seguran√ßa - $(date)"
            echo
            echo "## üìä Status dos Jobs"
            echo "- Dependency Check: ${{ needs.dependency-check.result }}"
            echo "- Secret Scan: ${{ needs.secret-scan.result }}"
            echo "- Container Security: ${{ needs.container-security.result }}"
            echo "- License Check: ${{ needs.license-check.result }}"
            echo "- Config Security: ${{ needs.config-security.result }}"
            echo
            echo "## üîç Vulnerabilidades (Safety)"
            if [ -f "security-reports/safety-report.json" ]; then
              COUNT=$(python -c "import json,sys; d=json.load(open('security-reports/safety-report.json')); print(len(d) if isinstance(d,list) else 0)" 2>/dev/null || echo 0)
              echo "- ${COUNT} encontradas"
            else
              echo "- Nenhum relat√≥rio encontrado"
            fi
            echo
            echo "## üéØ Recomenda√ß√µes"
            echo "1. Corrigir vulnerabilidades de alta severidade"
            echo "2. Atualizar depend√™ncias afetadas"
            echo "3. Revisar pol√≠tica de secrets e rota√ß√£o"
            echo "4. Configurar alertas autom√°ticos"
          } > security-summary.md
          cat security-summary.md

      - name: Upload resumo
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comentar no PR (se aplic√°vel)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md','utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
