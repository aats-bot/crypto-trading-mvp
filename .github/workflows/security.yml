name: Security Checks - Bot Trading MVP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executar verifica√ß√µes de seguran√ßa diariamente √†s 2:00 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Job 1: An√°lise de Depend√™ncias
  dependency-check:
    name: üîí Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Instalar ferramentas de seguran√ßa
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Verificar vulnerabilidades conhecidas
      run: |
        safety check --json --output safety-report.json || true
        
    - name: An√°lise de c√≥digo com Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: An√°lise com Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Upload relat√≥rios de seguran√ßa
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # Job 2: An√°lise de Secrets
  secret-scan:
    name: üîê Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history para an√°lise completa
        
    - name: Executar GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Job 3: An√°lise de Container
  container-security:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Build imagem Docker
      run: |
        docker build -t trading-bot:security-scan .
        
    - name: Executar Trivy (vulnerabilidades)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trading-bot:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Executar Trivy (configura√ß√£o)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        
    - name: Upload resultados do Trivy para GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: |
          trivy-results.sarif
          trivy-config-results.sarif

  # Job 4: An√°lise de C√≥digo Est√°tica (CodeQL)
  codeql-analysis:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Inicializar CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Executar an√°lise CodeQL
      uses: github/codeql-action/analyze@v2

  # Job 5: Verifica√ß√£o de Licen√ßas
  license-check:
    name: üìÑ License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Instalar pip-licenses
      run: |
        pip install pip-licenses
        
    - name: Verificar licen√ßas das depend√™ncias
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
          pip-licenses --format=json --output-file=licenses-report.json
          pip-licenses --format=plain-vertical
        fi
        
    - name: Verificar licen√ßas problem√°ticas
      run: |
        # Lista de licen√ßas n√£o permitidas
        FORBIDDEN_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
        
        if [ -f licenses-report.json ]; then
          python -c "
import json
import sys

with open('licenses-report.json', 'r') as f:
    licenses = json.load(f)

forbidden = ['GPL-3.0', 'AGPL-3.0', 'LGPL-3.0']
issues = []

for pkg in licenses:
    if pkg['License'] in forbidden:
        issues.append(f\"{pkg['Name']} ({pkg['License']})\")

if issues:
    print('‚ùå Licen√ßas problem√°ticas encontradas:')
    for issue in issues:
        print(f'  - {issue}')
    sys.exit(1)
else:
    print('‚úÖ Todas as licen√ßas s√£o compat√≠veis')
"
        fi
        
    - name: Upload relat√≥rio de licen√ßas
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses-report.json

  # Job 6: Verifica√ß√£o de Configura√ß√£o
  config-security:
    name: ‚öôÔ∏è Configuration Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Verificar arquivos de configura√ß√£o sens√≠veis
      run: |
        echo "üîç Verificando configura√ß√µes de seguran√ßa..."
        
        # Verificar se h√° arquivos sens√≠veis commitados
        SENSITIVE_FILES=".env .env.local .env.production config.ini secrets.json"
        
        for file in $SENSITIVE_FILES; do
          if [ -f "$file" ]; then
            echo "‚ö†Ô∏è  Arquivo sens√≠vel encontrado: $file"
            echo "   Conte√∫do:"
            head -5 "$file"
            echo "   ..."
          fi
        done
        
        # Verificar Dockerfile por pr√°ticas inseguras
        if [ -f "Dockerfile" ]; then
          echo "üê≥ Verificando Dockerfile..."
          
          if grep -q "USER root" Dockerfile; then
            echo "‚ö†Ô∏è  Dockerfile executa como root"
          fi
          
          if grep -q "ADD http" Dockerfile; then
            echo "‚ö†Ô∏è  Dockerfile usa ADD com HTTP (inseguro)"
          fi
          
          if grep -q "RUN.*sudo" Dockerfile; then
            echo "‚ö†Ô∏è  Dockerfile usa sudo"
          fi
        fi
        
        # Verificar docker-compose.yml
        if [ -f "docker-compose.yml" ]; then
          echo "üê≥ Verificando docker-compose.yml..."
          
          if grep -q "privileged: true" docker-compose.yml; then
            echo "‚ö†Ô∏è  Container com privil√©gios elevados"
          fi
          
          if grep -q "network_mode.*host" docker-compose.yml; then
            echo "‚ö†Ô∏è  Container usando network host"
          fi
        fi

  # Job 7: Relat√≥rio Consolidado
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, secret-scan, container-security, license-check, config-security]
    if: always()
    
    steps:
    - name: Download todos os artefatos
      uses: actions/download-artifact@v4
      
    - name: Gerar relat√≥rio consolidado
      run: |
        echo "# üîí Relat√≥rio de Seguran√ßa - $(date)" > security-summary.md
        echo "" >> security-summary.md
        
        echo "## üìä Status dos Jobs" >> security-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
        echo "- Config Security: ${{ needs.config-security.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Processar relat√≥rios se existirem
        if [ -d "security-reports" ]; then
          echo "## üîç Vulnerabilidades Encontradas" >> security-summary.md
          
          if [ -f "security-reports/safety-report.json" ]; then
            echo "### Safety (Depend√™ncias Python)" >> security-summary.md
            python -c "
import json
try:
    with open('security-reports/safety-report.json', 'r') as f:
        data = json.load(f)
    if data:
        print(f'- {len(data)} vulnerabilidades encontradas')
        for vuln in data[:5]:  # Mostrar apenas as 5 primeiras
            print(f'  - {vuln.get(\"advisory\", \"N/A\")}')
    else:
        print('- Nenhuma vulnerabilidade encontrada')
except:
    print('- Erro ao processar relat√≥rio')
" >> security-summary.md
          fi
        fi
        
        echo "" >> security-summary.md
        echo "## üéØ Recomenda√ß√µes" >> security-summary.md
        echo "1. Revisar e corrigir vulnerabilidades de alta severidade" >> security-summary.md
        echo "2. Atualizar depend√™ncias com vulnerabilidades conhecidas" >> security-summary.md
        echo "3. Implementar rota√ß√£o regular de secrets" >> security-summary.md
        echo "4. Configurar alertas de seguran√ßa autom√°ticos" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload relat√≥rio consolidado
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comentar no PR (se aplic√°vel)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
