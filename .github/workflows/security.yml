name: Security Checks - Bot Trading MVP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

# Permiss√µes m√≠nimas p/ subir SARIF e ler conte√∫do
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # Job 1: An√°lise de Depend√™ncias
  dependency-check:
    name: üîí Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Print Python & pip (debug)
        run: |
          python -V
          pip -V

      - name: Instalar ferramentas de seguran√ßa
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Verificar vulnerabilidades conhecidas (Safety)
        run: |
          safety check --json --output safety-report.json || true

      - name: An√°lise de c√≥digo com Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true

      # Semgrep via action oficial (mais est√°vel do que pip)
      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: true
          sarifFile: semgrep-report.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload relat√≥rios de seguran√ßa
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.sarif

  # Job 2: An√°lise de Secrets
  secret-scan:
    name: üîê Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Executar GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        # with:
        #   args: "--verbose"  # opcional

  # Job 3: An√°lise de Container
  container-security:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Build imagem Docker
        run: |
          docker build -t trading-bot:security-scan .

      - name: Executar Trivy (vulnerabilidades)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'trading-bot:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true

      - name: Executar Trivy (configura√ß√£o)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'config'
          format: 'sarif'
          output: 'trivy-config-results.sarif'

      - name: Upload resultados do Trivy para GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-results.sarif
            trivy-config-results.sarif

  # Job 4: An√°lise de C√≥digo Est√°tica (CodeQL)
  codeql-analysis:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Executar an√°lise CodeQL
        uses: github/codeql-action/analyze@v3

  # Job 5: Verifica√ß√£o de Licen√ßas
  license-check:
    name: üìÑ License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Instalar pip-licenses
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Verificar licen√ßas das depend√™ncias
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip-licenses --format=json --output-file=licenses-report.json
            pip-licenses --format=plain-vertical
          fi

      - name: Verificar licen√ßas problem√°ticas
    run: |
        cat > check_licenses.py << 'PY'
        import json, sys, os
        forbidden = {'GPL-3.0','AGPL-3.0','LGPL-3.0'}
        path = 'licenses-report.json'
        if not os.path.exists(path):
            print('licenses-report.json n√£o encontrado; pulando verifica√ß√£o')
            sys.exit(0)
        with open(path,'r', encoding='utf-8') as f:
            try:
                licenses = json.load(f)
            except Exception as e:
                print('Erro ao ler licenses-report.json:', e)
                sys.exit(0)
        issues = [f"{p.get('Name')} ({p.get('License')})" for p in licenses if p.get('License') in forbidden]
        if issues:
            print('‚ùå Licen√ßas problem√°ticas encontradas:')
            for i in issues:
                print('  -', i)
            sys.exit(1)
        else:
            print('‚úÖ Todas as licen√ßas s√£o compat√≠veis')
        PY
        python check_licenses.py

  # Job 6: Verifica√ß√£o de Configura√ß√£o
  config-security:
    name: ‚öôÔ∏è Configuration Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Verificar arquivos de configura√ß√£o sens√≠veis
        run: |
          echo "üîç Verificando configura√ß√µes de seguran√ßa..."
          SENSITIVE_FILES=".env .env.local .env.production config.ini secrets.json"
          for file in $SENSITIVE_FILES; do
            if [ -f "$file" ]; then
              echo "‚ö†Ô∏è  Arquivo sens√≠vel encontrado: $file"
              head -5 "$file" || true
            fi
          done
          if [ -f "Dockerfile" ]; then
            echo "üê≥ Verificando Dockerfile..."
            grep -q "USER root" Dockerfile && echo "‚ö†Ô∏è  Dockerfile executa como root" || true
            grep -q "ADD http" Dockerfile && echo "‚ö†Ô∏è  Dockerfile usa ADD com HTTP (inseguro)" || true
            grep -q "RUN.*sudo" Dockerfile && echo "‚ö†Ô∏è  Dockerfile usa sudo" || true
          fi
          if [ -f "docker-compose.yml" ]; then
            echo "üê≥ Verificando docker-compose.yml..."
            grep -q "privileged: true" docker-compose.yml && echo "‚ö†Ô∏è  Container com privil√©gios elevados" || true
            grep -q "network_mode.*host" docker-compose.yml && echo "‚ö†Ô∏è  Container usando network host" || true
          fi

  # Job 7: Relat√≥rio Consolidado
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, secret-scan, container-security, license-check, config-security]
    if: always()

    steps:
      - name: Download todos os artefatos
        uses: actions/download-artifact@v4

      - name: Gerar relat√≥rio consolidado
      shell: bash
      run: |
        set -e

        # Gera o arquivo inteiro sem heredoc
        {
          echo "# üîí Relat√≥rio de Seguran√ßa - $(date)"
          echo
          echo "## üìä Status dos Jobs"
          echo "- Dependency Check: ${{ needs.dependency-check.result }}"
          echo "- Secret Scan: ${{ needs.secret-scan.result }}"
          echo "- Container Security: ${{ needs.container-security.result }}"
          echo "- License Check: ${{ needs.license-check.result }}"
          echo "- Config Security: ${{ needs.config-security.result }}"
          echo
          echo "## üîç Vulnerabilidades Encontradas"
          if [ -f "security-reports/safety-report.json" ]; then
            COUNT=$(python - <<'PY'
import json, sys
try:
    data = json.load(open('security-reports/safety-report.json'))
    print(len(data) if isinstance(data, list) else 0)
except Exception:
    print(0)
PY
)
            echo "- ${COUNT} vulnerabilidades encontradas"
          else
            echo "- Nenhum relat√≥rio do Safety encontrado"
          fi
          echo
          echo "## üéØ Recomenda√ß√µes"
          echo "1. Revisar e corrigir vulnerabilidades de alta severidade"
          echo "2. Atualizar depend√™ncias com vulnerabilidades conhecidas"
          echo "3. Implementar rota√ß√£o regular de secrets"
          echo "4. Configurar alertas de seguran√ßa autom√°ticos"
        } > security-summary.md

        cat security-summary.md

      - name: Upload relat√≥rio consolidado
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comentar no PR (se aplic√°vel)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
