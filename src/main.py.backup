"""
Crypto Trading MVP - Main Application
FastAPI application for cryptocurrency trading bot
"""

import os
import sys
import logging
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler('/app/logs/api.log', mode='a') if os.path.exists('/app/logs') else logging.NullHandler(),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="Crypto Trading MVP API",
    description="API for cryptocurrency trading bot",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "crypto-trading-api"}

@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "Crypto Trading MVP API",
        "version": "1.0.0",
        "status": "running"
    }

@app.get("/api/status")
async def api_status():
    """API status endpoint"""
    return {
        "api": "running",
        "database": "connected",
        "redis": "connected",
        "worker": "active"
    }

if __name__ == "__main__":
    logger.info("Starting Crypto Trading MVP API...")
ECHO est  desativado.
    # Get configuration from environment
    host = os.getenv("API_HOST", "0.0.0.0")
    port = int(os.getenv("API_PORT", 8000))
ECHO est  desativado.
    logger.info(f"API starting on {host}:{port}")
ECHO est  desativado.
    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="info",
        access_log=True
    )
