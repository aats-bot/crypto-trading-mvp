services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto-trading-postgres
    environment:
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_2024
      DATABASE_URL: postgresql://trading_user:trading_password_2024@postgres:5432/crypto_trading
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d crypto_trading"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: crypto-trading-redis
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: crypto-trading-api
    environment:
      # Database
      DATABASE_URL: postgresql://trading_user:trading_password_2024@postgres:5432/crypto_trading
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_2024
      
      # Redis
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      REDIS_PASSWORD: redis_password_2024
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: "8000"
      API_URL: http://api:8000
      
      # Security
      SECRET_KEY: crypto-trading-mvp-super-secret-key-2024-production
      JWT_SECRET_KEY: jwt-crypto-trading-mvp-secret-key-2024-very-secure
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: "1440"
      
      # Environment
      ENVIRONMENT: production
      DEBUG: "false"
      
      # Streamlit Configuration (CORREÇÃO APLICADA)
      STREAMLIT_SERVER_PORT: "8501"
      STREAMLIT_SERVER_ADDRESS: "0.0.0.0"
      STREAMLIT_SERVER_HEADLESS: "true"
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
      STREAMLIT_SERVER_ENABLE_CORS: "false"
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: "false"
      STREAMLIT_SERVER_MAX_UPLOAD_SIZE: "200"
      
      # Worker Configuration
      WORKER_CONCURRENCY: "2"
      WORKER_LOG_LEVEL: INFO
      
      # Grafana (for consistency)
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - api_logs:/app/logs
      - api_data:/app/data
    ports:
      - "8000:8000"
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    user: "0:0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    container_name: crypto-trading-dashboard
    environment:
      # Database
      DATABASE_URL: postgresql://trading_user:trading_password_2024@postgres:5432/crypto_trading
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_2024
      
      # Redis
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      REDIS_PASSWORD: redis_password_2024
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: "8000"
      API_URL: http://api:8000
      
      # Security
      SECRET_KEY: crypto-trading-mvp-super-secret-key-2024-production
      JWT_SECRET_KEY: jwt-crypto-trading-mvp-secret-key-2024-very-secure
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: "1440"
      
      # Environment
      ENVIRONMENT: production
      DEBUG: "false"
      
      # Streamlit Configuration (CORREÇÃO APLICADA)
      STREAMLIT_SERVER_PORT: "8501"
      STREAMLIT_SERVER_ADDRESS: "0.0.0.0"
      STREAMLIT_SERVER_HEADLESS: "true"
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
      STREAMLIT_SERVER_ENABLE_CORS: "false"
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: "false"
      STREAMLIT_SERVER_MAX_UPLOAD_SIZE: "200"
      STREAMLIT_SERVER_RUN_ON_SAVE: "false"
      STREAMLIT_SERVER_FILE_WATCHER_TYPE: "none"
      
      # Worker Configuration
      WORKER_CONCURRENCY: "2"
      WORKER_LOG_LEVEL: INFO
    volumes:
      - dashboard_logs:/app/logs
      - dashboard_data:/app/data
    ports:
      - "8501:8501"
    networks:
      - trading-network
    depends_on:
      - api
    restart: unless-stopped
    user: "0:0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: crypto-trading-worker
    environment:
      # Database
      DATABASE_URL: postgresql://trading_user:trading_password_2024@postgres:5432/crypto_trading
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_2024
      
      # Redis
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      REDIS_PASSWORD: redis_password_2024
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: "8000"
      API_URL: http://api:8000
      
      # Security
      SECRET_KEY: crypto-trading-mvp-super-secret-key-2024-production
      JWT_SECRET_KEY: jwt-crypto-trading-mvp-secret-key-2024-very-secure
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: "1440"
      
      # Environment
      ENVIRONMENT: production
      DEBUG: "false"
      
      # Worker Configuration
      WORKER_CONCURRENCY: "2"
      WORKER_LOG_LEVEL: INFO
    volumes:
      - worker_logs:/app/logs
      - worker_data:/app/data
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    user: "0:0"

  nginx:
    image: nginx:alpine
    container_name: crypto-trading-nginx
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - trading-network
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  grafana:
    image: grafana/grafana:latest
    container_name: crypto-trading-grafana
    environment:
      # Grafana Configuration
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: ""
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_SERVER_SERVE_FROM_SUB_PATH: "false"
      
      # Database (optional - Grafana can use SQLite)
      GF_DATABASE_TYPE: sqlite3
      GF_DATABASE_PATH: /var/lib/grafana/grafana.db
      
      # Security
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_SECRET_KEY: grafana-secret-key-2024
      
      # Logging
      GF_LOG_LEVEL: info
      GF_LOG_MODE: console
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - trading-network
    restart: unless-stopped
    user: "0:0"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  trading-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  api_logs:
  api_data:
  dashboard_logs:
  dashboard_data:
  worker_logs:
  worker_data:

