#!/bin/bash
# Crypto Trading MVP - API Entrypoint
# Script de inicializa√ß√£o otimizado para container

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] API:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# Banner de inicializa√ß√£o
echo "=================================="
echo "üöÄ Crypto Trading MVP - API"
echo "üìä Bot de Trading Automatizado"
echo "=================================="
echo ""

# Verificar vari√°veis de ambiente obrigat√≥rias
log "Verificando configura√ß√£o..."

required_vars=(
    "DATABASE_URL"
    "JWT_SECRET_KEY"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        error "Vari√°vel de ambiente obrigat√≥ria n√£o definida: $var"
        exit 1
    fi
done

success "Configura√ß√£o validada"

# Verificar conectividade com banco de dados
log "Verificando conectividade com banco de dados..."

# Extrair host e porta do DATABASE_URL
DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')

if [ -n "$DB_HOST" ] && [ -n "$DB_PORT" ]; then
    # Aguardar banco de dados estar dispon√≠vel
    max_attempts=30
    attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if timeout 5 bash -c "</dev/tcp/$DB_HOST/$DB_PORT" 2>/dev/null; then
            success "Banco de dados dispon√≠vel"
            break
        else
            warning "Aguardando banco de dados... (tentativa $attempt/$max_attempts)"
            sleep 2
            attempt=$((attempt + 1))
        fi
    done
    
    if [ $attempt -gt $max_attempts ]; then
        error "Timeout aguardando banco de dados"
        exit 1
    fi
else
    warning "N√£o foi poss√≠vel extrair host/porta do DATABASE_URL, pulando verifica√ß√£o"
fi

# Executar migra√ß√µes de banco de dados se necess√°rio
if [ "$RUN_MIGRATIONS" = "true" ]; then
    log "Executando migra√ß√µes de banco de dados..."
    python -m alembic upgrade head || {
        error "Falha ao executar migra√ß√µes"
        exit 1
    }
    success "Migra√ß√µes executadas com sucesso"
fi

# Criar diret√≥rios necess√°rios
log "Criando estrutura de diret√≥rios..."
mkdir -p /app/logs /app/data /app/tmp
success "Diret√≥rios criados"

# Verificar permiss√µes
log "Verificando permiss√µes..."
if [ ! -w "/app/logs" ]; then
    error "Sem permiss√£o de escrita em /app/logs"
    exit 1
fi

if [ ! -w "/app/data" ]; then
    error "Sem permiss√£o de escrita em /app/data"
    exit 1
fi

success "Permiss√µes verificadas"

# Configurar logging
export LOG_LEVEL=${LOG_LEVEL:-INFO}
export LOG_FILE=${LOG_FILE:-/app/logs/api.log}

log "Configura√ß√£o de logging: Level=$LOG_LEVEL, File=$LOG_FILE"

# Verificar sa√∫de da aplica√ß√£o antes de iniciar
log "Verificando integridade da aplica√ß√£o..."
python -c "
import sys
sys.path.append('/app')
try:
    from app.main import app
    print('‚úÖ Aplica√ß√£o carregada com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao carregar aplica√ß√£o: {e}')
    sys.exit(1)
" || exit 1

success "Aplica√ß√£o verificada"

# Configurar workers baseado em CPU dispon√≠vel
if [ -z "$WORKERS" ]; then
    WORKERS=$(python -c "import os; print(min(4, max(1, os.cpu_count() or 1)))")
    log "Workers configurados automaticamente: $WORKERS"
fi

# Configurar outras op√ß√µes do Uvicorn
export UVICORN_HOST=${UVICORN_HOST:-0.0.0.0}
export UVICORN_PORT=${UVICORN_PORT:-8000}
export UVICORN_LOG_LEVEL=${UVICORN_LOG_LEVEL:-info}

log "Configura√ß√£o Uvicorn:"
log "  Host: $UVICORN_HOST"
log "  Port: $UVICORN_PORT"
log "  Workers: $WORKERS"
log "  Log Level: $UVICORN_LOG_LEVEL"

# Fun√ß√£o para cleanup graceful
cleanup() {
    log "Recebido sinal de shutdown, finalizando graciosamente..."
    # Aqui voc√™ pode adicionar l√≥gica de cleanup se necess√°rio
    exit 0
}

# Capturar sinais para shutdown graceful
trap cleanup SIGTERM SIGINT

# Log de inicializa√ß√£o final
success "Iniciando API do Crypto Trading MVP..."
echo ""

# Executar comando passado como argumento
exec "$@"

