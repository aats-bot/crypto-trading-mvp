# Crypto Trading MVP - Enterprise Configuration
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto-trading-postgres
    environment:
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d crypto_trading"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto-trading-redis
    command: redis-server --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Enterprise
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: crypto-trading-api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://trading_user:trading_password_2024@postgres:5432/crypto_trading
      
      # Redis
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      
      # Security
      JWT_SECRET_KEY: jwt-crypto-trading-mvp-secret-key-2024-very-secure
      ENCRYPTION_KEY: crypto-trading-encryption-key-2024-very-secure
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: "false"
      LOG_LEVEL: INFO
      
      # Environment
      ENVIRONMENT: production
    volumes:
      - api_logs:/src/logs
      - api_data:/src/data
    ports:
      - "8000:8000"
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Dashboard Enterprise
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    container_name: crypto-trading-dashboard
    environment:
      # API Configuration
      API_URL: http://api:8000
      
      # Streamlit Configuration
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_HEADLESS: "true"
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
      STREAMLIT_SERVER_ENABLE_CORS: "false"
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: "false"
      STREAMLIT_SERVER_MAX_UPLOAD_SIZE: 200
      
      # Environment
      ENVIRONMENT: production
    volumes:
      - dashboard_logs:/src/logs
      - dashboard_data:/src/data
    ports:
      - "8501:8501"
    networks:
      - trading-network
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Trading Bot Worker Enterprise
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: crypto-trading-worker
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://trading_user:trading_password_2024@postgres:5432/crypto_trading
      
      # Redis
      REDIS_URL: redis://:redis_password_2024@redis:6379/0
      
      # API
      API_URL: http://api:8000
      
      # Worker Configuration
      WORKER_CONCURRENCY: 2
      WORKER_LOG_LEVEL: INFO
      
      # Environment
      ENVIRONMENT: production
    volumes:
      - worker_logs:/src/logs
      - worker_data:/src/data
    networks:
      - trading-network
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Grafana Monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Proxy
  nginx:
    image: nginx:alpine
    container_name: crypto-trading-nginx
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - trading-network
    depends_on:
      - api
      - dashboard
      - grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  trading-network:
    driver: bridge
    name: crypto-trading-network

# Volumes
volumes:
  postgres_data:
    name: crypto-trading-postgres-data
  redis_data:
    name: crypto-trading-redis-data
  api_logs:
    name: crypto-trading-api-logs
  api_data:
    name: crypto-trading-api-data
  dashboard_logs:
    name: crypto-trading-dashboard-logs
  dashboard_data:
    name: crypto-trading-dashboard-data
  worker_logs:
    name: crypto-trading-worker-logs
  worker_data:
    name: crypto-trading-worker-data
  grafana_data:
    name: crypto-trading-grafana-data

  # Prometheus - Coleta de métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./docker/monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - crypto-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alertmanager - Gestão de alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: crypto-trading-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./docker/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - crypto-trading-network
    restart: unless-stopped

  # Node Exporter - Métricas do sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: crypto-trading-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - crypto-trading-network
    restart: unless-stopped

  # cAdvisor - Métricas de containers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: crypto-trading-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - crypto-trading-network
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-trading-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - crypto-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
