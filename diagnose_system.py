#!/usr/bin/env python3
"""
Script de diagn√≥stico do sistema Crypto Trading MVP
Identifica problemas comuns e sugere solu√ß√µes
"""
import os
import sys
import subprocess
import socket
from pathlib import Path

def check_python_version():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando Python...")
    version = sys.version_info
    print(f"   Vers√£o: {version.major}.{version.minor}.{version.micro}")
    
    if version.major >= 3 and version.minor >= 8:
        print("   ‚úÖ Vers√£o do Python adequada")
        return True
    else:
        print("   ‚ùå Python 3.8+ necess√°rio")
        return False

def check_dependencies():
    """Verifica depend√™ncias Python essenciais"""
    print("\nüì¶ Verificando depend√™ncias...")
    
    required_packages = [
        'psycopg2',
        'fastapi', 
        'uvicorn',
        'streamlit',
        'pydantic',
        'bcrypt',
        'asyncpg'
    ]
    
    missing = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - FALTANDO")
            missing.append(package)
    
    if missing:
        print(f"\nüí° Para instalar depend√™ncias faltantes:")
        print(f"   pip install {' '.join(missing)}")
        return False
    
    return True

def check_postgresql():
    """Verifica se PostgreSQL est√° acess√≠vel"""
    print("\nüêò Verificando PostgreSQL...")
    
    try:
        import psycopg2
        
        # Tentar conectar
        conn = psycopg2.connect(
            host="localhost",
            port="5432", 
            database="postgres",  # Conectar ao banco padr√£o primeiro
            user="postgres",
            password="aats.dados",
            connect_timeout=5
        )
        conn.close()
        print("   ‚úÖ PostgreSQL acess√≠vel")
        
        # Verificar se o banco crypto_trading_mvp existe
        try:
            conn = psycopg2.connect(
                host="localhost",
                port="5432",
                database="crypto_trading_mvp",
                user="postgres", 
                password="aats.dados",
                connect_timeout=5
            )
            conn.close()
            print("   ‚úÖ Banco crypto_trading_mvp existe")
            return True
        except psycopg2.OperationalError:
            print("   ‚ö†Ô∏è  Banco crypto_trading_mvp n√£o existe")
            print("   üí° Execute: createdb -U postgres crypto_trading_mvp")
            return False
            
    except ImportError:
        print("   ‚ùå psycopg2 n√£o instalado")
        print("   üí° Execute: pip install psycopg2-binary")
        return False
    except psycopg2.OperationalError as e:
        print(f"   ‚ùå Erro de conex√£o: {e}")
        print("   üí° Verifique se PostgreSQL est√° rodando")
        print("   üí° Verifique usu√°rio/senha: postgres/aats.dados")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro inesperado: {e}")
        return False

def check_ports():
    """Verifica se as portas necess√°rias est√£o livres"""
    print("\nüîå Verificando portas...")
    
    ports_to_check = [
        (8000, "API FastAPI"),
        (8501, "Dashboard Streamlit"),
        (5432, "PostgreSQL")
    ]
    
    all_good = True
    
    for port, service in ports_to_check:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        
        try:
            result = sock.connect_ex(('localhost', port))
            if result == 0:
                print(f"   ‚ö†Ô∏è  Porta {port} ({service}) est√° em uso")
                if port != 5432:  # PostgreSQL deve estar em uso
                    all_good = False
            else:
                if port == 5432:
                    print(f"   ‚ùå Porta {port} ({service}) n√£o est√° em uso")
                    all_good = False
                else:
                    print(f"   ‚úÖ Porta {port} ({service}) dispon√≠vel")
        except Exception as e:
            print(f"   ‚ùå Erro ao verificar porta {port}: {e}")
            all_good = False
        finally:
            sock.close()
    
    return all_good

def check_project_structure():
    """Verifica a estrutura do projeto"""
    print("\nüìÅ Verificando estrutura do projeto...")
    
    required_files = [
        'src/api/main.py',
        'src/dashboard/main.py', 
        'src/bot/worker.py',
        'config/settings.py',
        '.env',
        'start_services.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - FALTANDO")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\nüí° Arquivos faltando: {len(missing_files)}")
        return False
    
    return True

def check_environment_variables():
    """Verifica vari√°veis de ambiente"""
    print("\nüåç Verificando vari√°veis de ambiente...")
    
    if Path('.env').exists():
        print("   ‚úÖ Arquivo .env existe")
        
        # Ler algumas vari√°veis importantes
        try:
            with open('.env', 'r') as f:
                content = f.read()
                
            if 'DATABASE_URL' in content:
                print("   ‚úÖ DATABASE_URL configurada")
            else:
                print("   ‚ùå DATABASE_URL n√£o encontrada")
                
            if 'API_PORT' in content:
                print("   ‚úÖ API_PORT configurada")
            else:
                print("   ‚ùå API_PORT n√£o encontrada")
                
            return True
        except Exception as e:
            print(f"   ‚ùå Erro ao ler .env: {e}")
            return False
    else:
        print("   ‚ùå Arquivo .env n√£o encontrado")
        return False

def suggest_solutions(issues):
    """Sugere solu√ß√µes para problemas encontrados"""
    if not issues:
        return
    
    print("\nüîß SOLU√á√ïES SUGERIDAS:")
    print("=" * 50)
    
    if 'python' in issues:
        print("üìå PYTHON:")
        print("   - Instale Python 3.8 ou superior")
        print("   - https://www.python.org/downloads/")
        print()
    
    if 'dependencies' in issues:
        print("üìå DEPEND√äNCIAS:")
        print("   pip install psycopg2-binary fastapi uvicorn streamlit pydantic bcrypt asyncpg")
        print()
    
    if 'postgresql' in issues:
        print("üìå POSTGRESQL:")
        print("   Windows:")
        print("   - Baixe: https://www.postgresql.org/download/windows/")
        print("   - Instale com senha 'aats.dados' para usu√°rio postgres")
        print("   - Crie banco: createdb -U postgres crypto_trading_mvp")
        print()
        print("   Linux/WSL:")
        print("   - sudo apt install postgresql postgresql-contrib")
        print("   - sudo -u postgres psql -c \"ALTER USER postgres PASSWORD 'aats.dados';\"")
        print("   - sudo -u postgres createdb crypto_trading_mvp")
        print()
    
    if 'ports' in issues:
        print("üìå PORTAS:")
        print("   - Feche aplica√ß√µes usando portas 8000 e 8501")
        print("   - Windows: netstat -ano | findstr :8000")
        print("   - Linux: lsof -i :8000")
        print()
    
    if 'structure' in issues:
        print("üìå ESTRUTURA DO PROJETO:")
        print("   - Verifique se est√° no diret√≥rio correto")
        print("   - Re-extraia o projeto se necess√°rio")
        print()

def run_quick_fix():
    """Executa corre√ß√µes r√°pidas autom√°ticas"""
    print("\nüîß Executando corre√ß√µes autom√°ticas...")
    
    # Instalar depend√™ncias b√°sicas
    try:
        print("   üì¶ Instalando depend√™ncias essenciais...")
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', 
            'psycopg2-binary', 'fastapi', 'uvicorn', 'streamlit', 'bcrypt'
        ], check=True, capture_output=True)
        print("   ‚úÖ Depend√™ncias instaladas")
    except subprocess.CalledProcessError:
        print("   ‚ùå Falha ao instalar depend√™ncias")
    
    # Criar diret√≥rios se necess√°rio
    dirs_to_create = ['logs', 'data', 'backups']
    for dir_name in dirs_to_create:
        Path(dir_name).mkdir(exist_ok=True)
    print("   ‚úÖ Diret√≥rios criados")

def main():
    """Fun√ß√£o principal de diagn√≥stico"""
    print("=" * 60)
    print("üîç DIAGN√ìSTICO DO SISTEMA - CRYPTO TRADING MVP")
    print("=" * 60)
    
    issues = []
    
    # Executar verifica√ß√µes
    if not check_python_version():
        issues.append('python')
    
    if not check_dependencies():
        issues.append('dependencies')
    
    if not check_postgresql():
        issues.append('postgresql')
    
    if not check_ports():
        issues.append('ports')
    
    if not check_project_structure():
        issues.append('structure')
    
    if not check_environment_variables():
        issues.append('environment')
    
    print("\n" + "=" * 60)
    
    if not issues:
        print("üéâ SISTEMA OK - TODOS OS TESTES PASSARAM!")
        print("\n‚úÖ Pr√≥ximos passos:")
        print("   1. python init_database_windows.py")
        print("   2. python start_services.py")
        print("   3. Acesse http://localhost:8501")
    else:
        print(f"‚ö†Ô∏è  PROBLEMAS ENCONTRADOS: {len(issues)}")
        suggest_solutions(issues)
        
        print("\nüîß Executar corre√ß√µes autom√°ticas? (s/n): ", end="")
        try:
            response = input().lower()
            if response in ['s', 'sim', 'y', 'yes']:
                run_quick_fix()
        except KeyboardInterrupt:
            print("\n\nüëã Diagn√≥stico cancelado")
    
    print("=" * 60)

if __name__ == "__main__":
    main()

