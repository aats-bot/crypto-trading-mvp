version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto-trading-postgres
    environment:
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d crypto_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto-trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: crypto-trading-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password_123@postgres:5432/crypto_trading
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src
    networks:
      - crypto-trading-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Service
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    container_name: crypto-trading-dashboard
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src
    networks:
      - crypto-trading-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: crypto-trading-worker
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password_123@postgres:5432/crypto_trading
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src
    networks:
      - crypto-trading-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crypto-trading-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - crypto-trading-network
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-trading-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - crypto-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Coleta de métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./docker/monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - crypto-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alertmanager - Gestão de alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: crypto-trading-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./docker/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - crypto-trading-network
    restart: unless-stopped

  # Node Exporter - Métricas do sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: crypto-trading-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - crypto-trading-network
    restart: unless-stopped

  # cAdvisor - Métricas de containers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: crypto-trading-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - crypto-trading-network
    restart: unless-stopped

networks:
  crypto-trading-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
